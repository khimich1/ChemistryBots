from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from html import escape

from config import ONLINE_WINDOW_MINUTES
from services.students import (
    get_online_students, get_current_task,
    get_session_activity, get_recent_activity,
    get_question_details, get_question_position
)
from handlers import menu

router = Router()

# user_id –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è -> "YYYY-MM-DD HH:MM:SS"
practice_started_at: dict[int, str] = {}


def _practice_kb(user_id: int) -> ReplyKeyboardMarkup:
    started = user_id in practice_started_at
    btn = "‚èπ –ó–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É" if started else "‚ñ∂ –ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É"
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=btn)]], resize_keyboard=True)


def _refresh_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="online_refresh")]
    ])


def _fmt_name(student: dict) -> str:
    username = student.get("username")
    full_name = student.get("full_name")
    if username:
        return f"@{escape(username)}"
    if full_name:
        return escape(full_name)
    return f"ID {student['user_id']}"


def _fmt_question(q: dict) -> str:
    question = escape(q.get("question", "") or "")
    options = escape(q.get("options", "") or "")
    correct = escape(q.get("correct_answer", "") or "")
    return (
        f"üìò <b>–í–æ–ø—Ä–æ—Å:</b> {question}\n\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:\n{options}\n\n"
        f"‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π:</b> {correct}"
    )


def _fmt_header(test_type: int | None, pos: int | None, total: int | None) -> str:
    parts = []
    if test_type is not None:
        parts.append(f"üß™ <b>–ó–∞–¥–∞–Ω–∏–µ ‚Ññ:</b> {test_type}")
    if pos is not None and total is not None:
        parts.append(f"‚ùì <b>–í–æ–ø—Ä–æ—Å:</b> {pos} –∏–∑ {total}")
    return "\n".join(parts)


def _build_online_text(viewer_id: int) -> str:
    students = get_online_students(timeout_minutes=ONLINE_WINDOW_MINUTES, with_names=True)
    if not students:
        return "–ù–∏–∫–æ–≥–æ –æ–Ω–ª–∞–π–Ω."
    lines = ["<b>–£—á–µ–Ω–∏–∫–∏ –æ–Ω–ª–∞–π–Ω:</b>\n"]
    for s in students:
        name = _fmt_name(s)
        lines.append(f"üë®‚Äçüéì <b>{name}</b>")

        current = get_current_task(s["user_id"])
        if current:
            test_type, q_id, _ = current
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ç–∏–ø–æ–º –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∫–æ–π
            pos, total = get_question_position(s["user_id"], test_type, q_id)
            header = _fmt_header(test_type, pos, total)
            if header:
                lines.append(header)

            # –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
            q = get_question_details(q_id) or {}
            if q:
                lines.append(_fmt_question(q))
                lines.append("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ–π—á–∞—Å")
            else:
                lines.append(f"üìã –í–æ–ø—Ä–æ—Å ID {q_id}\n(–¥–µ—Ç–∞–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)")
        else:
            lines.append("‚Äî –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")

        # –°—Å—ã–ª–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –í–°–ï–ì–î–ê
        lines.append(f"/history_{s['user_id']}")
        lines.append("")
    return "\n".join(lines)


@router.message(Command("online"))
@router.message(lambda m: m.text and "—É—á–µ–Ω–∏–∫–∏ –æ–Ω–ª–∞–π–Ω" in m.text.lower())
async def online_entry(m: types.Message):
    await m.answer("–†–∞–∑–¥–µ–ª ¬´–£—á–µ–Ω–∏–∫–∏ –æ–Ω–ª–∞–π–Ω¬ª.", reply_markup=_practice_kb(m.from_user.id))
    text = _build_online_text(m.from_user.id)
    await m.answer(text, parse_mode="HTML", reply_markup=_refresh_kb())


@router.message(lambda m: m.text == "‚ñ∂ –ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É")
async def start_practice(m: types.Message):
    practice_started_at[m.from_user.id] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    text = _build_online_text(m.from_user.id)
    await m.answer(text, parse_mode="HTML", reply_markup=_refresh_kb())
    await m.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=_practice_kb(m.from_user.id))


@router.message(lambda m: m.text == "‚èπ –ó–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É")
async def stop_practice(m: types.Message):
    practice_started_at.pop(m.from_user.id, None)
    await m.answer("–ü—Ä–∞–∫—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    await menu.cmd_start(m)


@router.callback_query(lambda c: c.data == "online_refresh")
async def refresh_online(cb: types.CallbackQuery):
    text = _build_online_text(cb.from_user.id)
    try:
        await cb.message.edit_text(text, parse_mode="HTML", reply_markup=_refresh_kb())
    except Exception:
        pass
    await cb.answer()


@router.message(lambda m: m.text and m.text.startswith("/history_"))
async def show_history(m: types.Message):
    since_ts = practice_started_at.get(m.from_user.id)

    try:
        uid = int(m.text.split("_", 1)[1])
    except Exception:
        await m.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏—Å—Ç–æ—Ä–∏–∏.")
        return

    # –µ—Å–ª–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞ –∏–¥—ë—Ç ‚Äî —Å –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏; –∏–Ω–∞—á–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20
    events = (get_session_activity(uid, since_ts, with_names=False)
              if since_ts else get_recent_activity(uid, limit=20))

    if not events:
        await m.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return

    title_suffix = f"—Å {since_ts}" if since_ts else "–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–±—ã—Ç–∏–π"
    out = [f"<b>–ò—Å—Ç–æ—Ä–∏—è —É—á–µ–Ω–∏–∫–∞ ID {uid}</b>\n{title_suffix}\n"]

    for e in events:
        q = get_question_details(e["question_id"]) or {}
        status_emoji = "‚úÖ" if e["is_correct"] else "‚ùå" if e["answered_at"] else "‚è≥"

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å ¬´–ó–∞–¥–∞–Ω–∏–µ ‚Ññ¬ª –∏ ¬´–í–æ–ø—Ä–æ—Å: n –∏–∑ m¬ª
        pos, total = get_question_position(uid, e["test_type"], e["question_id"])
        header = _fmt_header(e["test_type"], pos, total)
        if header:
            out.append(header)

        if q:
            out.append(
                f"{status_emoji} {_fmt_question(q)}\n"
                f"–û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞: <b>{escape(e['user_answer'] or '‚Äî')}</b>\n"
                f"–ù–∞—á–∞–ª: {e['started_at']}\n"
                f"–û—Ç–≤–µ—Ç–∏–ª: {e['answered_at'] or '‚Äî'}\n"
                "‚Äî ‚Äî ‚Äî"
            )
        else:
            out.append(
                f"{status_emoji} –í–æ–ø—Ä–æ—Å ID {e['question_id']}\n"
                f"–û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞: <b>{escape(e['user_answer'] or '‚Äî')}</b>\n"
                f"–ù–∞—á–∞–ª: {e['started_at']}\n"
                f"–û—Ç–≤–µ—Ç–∏–ª: {e['answered_at'] or '‚Äî'}\n"
                "‚Äî ‚Äî ‚Äî"
            )

    await m.answer("\n".join(out), parse_mode="HTML")
