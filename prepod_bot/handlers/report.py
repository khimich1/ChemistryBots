import os
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from services.students import get_all_students, update_user_profile, clear_hide_reason_all, set_hide_reason
from services.govr_report import make_pdf_report
from states import EditStudent

router = Router()


def _students_kb():
    students = get_all_students()
    # –ö–Ω–æ–ø–∫–∏ –≤ 1 —Å—Ç–æ–ª–±–µ—Ü
    keyboard = [[InlineKeyboardButton(text=s["label"], callback_data=f"student_{s['user_id']}")] for s in students]
    # –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö" –≤ –∫–æ–Ω—Ü–µ
    keyboard.append([InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö", callback_data="students_show_all")])
    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî –¥–æ–±–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É
    if not keyboard:
        keyboard = [[InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç", callback_data="noop")]]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def _student_menu_kb(user_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìà –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å", callback_data=f"stud_{user_id}_progress")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"stud_{user_id}_edit")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data=f"stud_{user_id}_delete")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="students_back")],
    ])


@router.message(lambda m: m.text == "üìà –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å")
async def report_entry(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:", reply_markup=_students_kb())


@router.callback_query(lambda c: c.data == "students_back")
async def students_back(cb: types.CallbackQuery):
    try:
        await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:", reply_markup=_students_kb())
    except Exception:
        await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:", reply_markup=_students_kb())
    await cb.answer()


@router.callback_query(lambda c: c.data == "students_show_all")
async def students_show_all(cb: types.CallbackQuery):
    changed = clear_hide_reason_all()
    text = "–°–±—Ä–æ—à–µ–Ω—ã —Å–∫—Ä—ã—Ç–∏—è —É –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤." if changed else "–ù–∏–∫—Ç–æ –Ω–µ –±—ã–ª —Å–∫—Ä—ã—Ç."
    try:
        await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:", reply_markup=_students_kb())
    except Exception:
        await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:", reply_markup=_students_kb())
    await cb.answer(text, show_alert=True)


@router.callback_query(lambda c: c.data and c.data.startswith("student_"))
async def student_selected(cb: types.CallbackQuery):
    try:
        user_id = int(cb.data.split("_", 1)[1])
    except Exception:
        await cb.answer("–û—à–∏–±–∫–∞ ID", show_alert=True)
        return
    try:
        await cb.message.edit_text(f"–£—á–µ–Ω–∏–∫ ID {user_id}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=_student_menu_kb(user_id))
    except Exception:
        await cb.message.answer(f"–£—á–µ–Ω–∏–∫ ID {user_id}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=_student_menu_kb(user_id))
    await cb.answer()


@router.callback_query(lambda c: c.data and c.data.endswith("_progress"))
async def student_progress(cb: types.CallbackQuery):
    user_id = int(cb.data.split("_", 2)[1])
    # –∏–º—è –¥–ª—è —à–∞–ø–∫–∏ –±–µ—Ä—ë–º –∏–∑ –ø–æ–¥–ø–∏—Å–∏ –∫–Ω–æ–ø–∫–∏ / –ª–∏–±–æ –ø—É—Å—Ç–æ–µ
    # –°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    filename = f"report_{user_id}.pdf"
    path = make_pdf_report(user_id, fullname=None, filename=filename)
    try:
        await cb.message.answer_document(document=types.FSInputFile(path), caption=f"–û—Ç—á—ë—Ç –ø–æ —É—á–µ–Ω–∏–∫—É ID {user_id}")
    except Exception as e:
        await cb.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç: {e}")
    finally:
        try:
            if path and os.path.exists(path):
                os.remove(path)
        except Exception:
            pass
    await cb.answer()


# === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è ===
def _edit_menu_kb(user_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å username", callback_data=f"stud_{user_id}_edit_username")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è (full_name)", callback_data=f"stud_{user_id}_edit_fullname")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"student_{user_id}")],
    ])


@router.callback_query(lambda c: c.data and c.data.endswith("_edit"))
async def edit_menu(cb: types.CallbackQuery):
    user_id = int(cb.data.split("_", 2)[1])
    try:
        await cb.message.edit_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —É—á–µ–Ω–∏–∫–∞:", reply_markup=_edit_menu_kb(user_id))
    except Exception:
        await cb.message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —É—á–µ–Ω–∏–∫–∞:", reply_markup=_edit_menu_kb(user_id))
    await cb.answer()


@router.callback_query(lambda c: c.data and c.data.endswith("_edit_username"))
async def ask_new_username(cb: types.CallbackQuery, state: FSMContext):
    user_id = int(cb.data.split("_", 2)[1])
    await state.update_data(edit_user_id=user_id)
    await state.set_state(EditStudent.waiting_new_username)
    await cb.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π username (–º–æ–∂–Ω–æ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å):")
    await cb.answer()


@router.callback_query(lambda c: c.data and c.data.endswith("_edit_fullname"))
async def ask_new_fullname(cb: types.CallbackQuery, state: FSMContext):
    user_id = int(cb.data.split("_", 2)[1])
    await state.update_data(edit_user_id=user_id)
    await state.set_state(EditStudent.waiting_new_fullname)
    await cb.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è (full_name). –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ:")
    await cb.answer()


@router.message(EditStudent.waiting_new_username)
async def save_new_username(m: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = int(data["edit_user_id"])  # –∫–æ–º—É –º–µ–Ω—è–µ–º
    new_username = (m.text or "").strip()
    update_user_profile(user_id, username=new_username)
    await state.clear()
    await m.answer("Username –æ–±–Ω–æ–≤–ª—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤...", reply_markup=_students_kb())


@router.message(EditStudent.waiting_new_fullname)
async def save_new_fullname(m: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = int(data["edit_user_id"])  # –∫–æ–º—É –º–µ–Ω—è–µ–º
    new_fullname = (m.text or "").strip()
    update_user_profile(user_id, full_name=new_fullname)
    await state.clear()
    await m.answer("–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞—é —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤...", reply_markup=_students_kb())


@router.callback_query(lambda c: c.data and c.data.endswith("_delete"))
async def hide_student(cb: types.CallbackQuery):
    user_id = int(cb.data.split("_", 2)[1])
    set_hide_reason(user_id, reason="hidden_by_teacher")
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    try:
        await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:", reply_markup=_students_kb())
    except Exception:
        await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:", reply_markup=_students_kb())
    await cb.answer("–£—á–µ–Ω–∏–∫ —Å–∫—Ä—ã—Ç –∏–∑ —Å–ø–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö' —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å.", show_alert=True)
