from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from bot.services.db import get_user, upsert_user, init_users_db
from bot.services.gpt_service import chat_with_gpt
from aiogram.fsm.state import State, StatesGroup


router = Router()


class Onboarding(StatesGroup):
    waiting_parent_name = State()
    waiting_child_nick = State()


main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –û—Ç—á—ë—Ç –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏")],
        [KeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏–π")],
        [KeyboardButton(text="ü§ñ –î–æ—Å—Ç—É–ø –∫ GPT")],
    ],
    resize_keyboard=True,
)


@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    init_users_db()
    upsert_user(message.from_user.id)
    await state.set_state(Onboarding.waiting_parent_name)
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.")


@router.message(Onboarding.waiting_parent_name)
async def parent_name_received(message: Message, state: FSMContext):
    upsert_user(message.from_user.id, parent_name=message.text.strip())
    await state.set_state(Onboarding.waiting_child_nick)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–∏–∫ –≤ Telegram –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @nickname)")


@router.message(Onboarding.waiting_child_nick)
async def child_nick_received(message: Message, state: FSMContext):
    upsert_user(message.from_user.id, child_nick=message.text.strip())
    await state.clear()
    await message.answer("–°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=main_kb)


@router.message(F.text.in_({"üìä –û—Ç—á—ë—Ç –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏", "üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏–π"}))
async def stubs(message: Message):
    if message.text == "üìä –û—Ç—á—ë—Ç –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏":
        await message.answer("–û—Ç—á—ë—Ç –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏: —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.")
    else:
        await message.answer("–û–ø–ª–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏–π: —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞.")


@router.message(F.text == "ü§ñ –î–æ—Å—Ç—É–ø –∫ GPT")
async def gpt_entry(message: Message):
    user = get_user(message.from_user.id)
    parent_name = user[0] if user else "—Ä–æ–¥–∏—Ç–µ–ª—å"
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è GPT. –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è.\n"
        "–ß—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: /reset"
    )


@router.message(F.text & ~F.text.in_({"üìä –û—Ç—á—ë—Ç –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏", "üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏–π", "ü§ñ –î–æ—Å—Ç—É–ø –∫ GPT"}))
async def gpt_chat(message: Message):
    user = get_user(message.from_user.id)
    parent_name = user[0] if user else "—Ä–æ–¥–∏—Ç–µ–ª—å"
    system = f"–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ {parent_name}. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
    try:
        answer = await chat_with_gpt(message.from_user.id, system, message.text)
    except Exception as e:
        await message.answer(f"GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return
    await message.answer(answer)


