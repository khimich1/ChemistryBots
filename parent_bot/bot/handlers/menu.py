from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, FSInputFile

from bot.services.db import get_user, upsert_user, init_users_db
from bot.services.gpt_service import chat_with_gpt
from aiogram.fsm.state import State, StatesGroup

import os
import sqlite3
import subprocess
from pathlib import Path

# –ü—É—Ç–∏ –∫ –æ–±—â–∏–º –ë–î (–∫–æ—Ä–µ–Ω—å –≤—Å–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è ChemistryBots)
REPO_ROOT = os.path.normpath(os.path.join(os.path.dirname(__file__), "..", "..", ".."))
SHARED_DIR = os.path.join(REPO_ROOT, "shared")
TEST_ANSWERS_DB = os.path.join(SHARED_DIR, "test_answers.db")

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è govr_bot (–¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—á—ë—Ç–∞)
GOVR_BOT_DIR = os.path.join(REPO_ROOT, "govr_bot")

router = Router()


class Onboarding(StatesGroup):
	waiting_parent_name = State()
	waiting_child_nick = State()
	waiting_child_nick_for_report = State()


main_kb = ReplyKeyboardMarkup(
	keyboard=[
		[KeyboardButton(text="üìä –û—Ç—á—ë—Ç –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏")],
		[KeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏–π")],
		[KeyboardButton(text="ü§ñ –î–æ—Å—Ç—É–ø –∫ GPT")],
	],
	resize_keyboard=True,
)


@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
	init_users_db()
	user = get_user(message.from_user.id)
	# –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–¥–∏–º –ø—É—Å—Ç—É—é (—Å username) –∏ –Ω–∞—á–Ω—ë–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
	if not user:
		upsert_user(message.from_user.id, parent_username=message.from_user.username)
		await state.set_state(Onboarding.waiting_parent_name)
		await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.")
		return

	parent_name, child_nick, parent_username = user
	parent_name = (parent_name or "").strip()
	child_nick = (child_nick or "").strip()
	if not parent_username:
		upsert_user(message.from_user.id, parent_username=message.from_user.username)

	# –ï—Å–ª–∏ —É–∂–µ –≤—Å—ë –∑–∞–ø–æ–ª–Ω–µ–Ω–æ ‚Äî —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
	if parent_name and child_nick:
		await state.clear()
		await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)
		return

	# –ò–Ω–∞—á–µ –¥–æ—Å–æ–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
	if not parent_name:
		await state.set_state(Onboarding.waiting_parent_name)
		await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.")
		return
	if not child_nick:
		await state.set_state(Onboarding.waiting_child_nick)
		await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–∏–∫ –≤ Telegram –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @nickname)")
		return


@router.message(Onboarding.waiting_parent_name)
async def parent_name_received(message: Message, state: FSMContext):
	upsert_user(message.from_user.id, parent_name=message.text.strip())
	await state.set_state(Onboarding.waiting_child_nick)
	await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–∏–∫ –≤ Telegram –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @nickname)")


@router.message(Onboarding.waiting_child_nick)
async def child_nick_received(message: Message, state: FSMContext):
	upsert_user(message.from_user.id, child_nick=message.text.strip())
	await state.clear()
	await message.answer("–°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=main_kb)


def _find_student_user_id_by_nick(nick: str) -> int | None:
	nick = (nick or "").lstrip("@").strip()
	if not nick:
		return None
	with sqlite3.connect(TEST_ANSWERS_DB) as conn:
		c = conn.cursor()
		c.execute(
			"""
			SELECT user_id
			FROM test_answers
			WHERE REPLACE(LOWER(username),'@','') = LOWER(?)
			ORDER BY answer_time DESC
			LIMIT 1
			""",
			(nick,),
		)
		row = c.fetchone()
		return int(row[0]) if row else None


def _generate_report_pdf(user_id: int, fallback_name: str | None = None) -> str:
	"""–í—ã–∑—ã–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á—ë—Ç–∞ –∏–∑ govr_bot –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ PDF."""
	# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –∏–∑ venv govr_bot, —á—Ç–æ–±—ã –±—ã–ª–∏ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (matplotlib, reportlab)
	govr_python = os.path.join(GOVR_BOT_DIR, "venv", "bin", "python")
	python_exe = govr_python if os.path.exists(govr_python) else os.getenv("PYTHON", "python3")
	out_path = str(Path(os.path.join(SHARED_DIR, f"report_{user_id}.pdf")).resolve())
	# –ó–∞–ø—É—Å–∫–∞–µ–º CLI –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ govr_bot, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
	cmd = [python_exe, "-m", "bot.services.report_cli", "--user-id", str(user_id), "--output", out_path]
	if fallback_name:
		cmd += ["--fallback-name", fallback_name]
	res = subprocess.run(cmd, cwd=GOVR_BOT_DIR, capture_output=True, text=True)
	# stdout –ø–µ—á–∞—Ç–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å; –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–µ—Ä–Ω—ë–º –æ–∂–∏–¥–∞–µ–º—ã–π out_path
	return (res.stdout.strip() or out_path)


@router.message(F.text.in_({"üìä –û—Ç—á—ë—Ç –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏", "üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏–π"}))
async def stubs(message: Message, state: FSMContext):
	if message.text == "üìä –û—Ç—á—ë—Ç –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏":
		init_users_db()
		user = get_user(message.from_user.id)
		child_nick = user[1] if user else None
		if not child_nick or not child_nick.strip():
			await state.set_state(Onboarding.waiting_child_nick_for_report)
			await message.answer("–£ –º–µ–Ω—è –Ω–µ—Ç –Ω–∏–∫–∞ —É—á–µ–Ω–∏–∫–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∏–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @nickname)")
			return
		student_id = _find_student_user_id_by_nick(child_nick)
		if not student_id:
			await message.answer("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –≤ –±–∞–∑–µ –æ—Ç–≤–µ—Ç–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç—ã.")
			return
		pdf_path = _generate_report_pdf(student_id, fallback_name=child_nick)
		await message.answer_document(FSInputFile(pdf_path), caption=f"–û—Ç—á—ë—Ç –¥–ª—è {child_nick}")
	else:
		await message.answer("–û–ø–ª–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏–π: —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞.")


@router.message(Onboarding.waiting_child_nick_for_report)
async def child_nick_for_report(message: Message, state: FSMContext):
	child_nick = (message.text or "").strip()
	upsert_user(message.from_user.id, child_nick=child_nick)
	await state.clear()
	student_id = _find_student_user_id_by_nick(child_nick)
	if not student_id:
		await message.answer("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –≤ –±–∞–∑–µ –æ—Ç–≤–µ—Ç–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç—ã.")
		return
	pdf_path = _generate_report_pdf(student_id, fallback_name=child_nick)
	await message.answer_document(FSInputFile(pdf_path), caption=f"–û—Ç—á—ë—Ç –¥–ª—è {child_nick}")


@router.message(F.text == "ü§ñ –î–æ—Å—Ç—É–ø –∫ GPT")
async def gpt_entry(message: Message):
	user = get_user(message.from_user.id)
	parent_name = (user[0] if user else None) or "—Ä–æ–¥–∏—Ç–µ–ª—å"
	await message.answer(
		"–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è GPT. –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è.\n"
		"–ß—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: /reset"
	)


@router.message(F.text & ~F.text.in_({"üìä –û—Ç—á—ë—Ç –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏", "üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏–π", "ü§ñ –î–æ—Å—Ç—É–ø –∫ GPT"}))
async def gpt_chat(message: Message):
	user = get_user(message.from_user.id)
	parent_name = (user[0] if user else None) or "—Ä–æ–¥–∏—Ç–µ–ª—å"
	system = f"–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ {parent_name}. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
	try:
		answer = await chat_with_gpt(message.from_user.id, system, message.text)
	except Exception as e:
		await message.answer(f"GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
		return
	await message.answer(answer)


