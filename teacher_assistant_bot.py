import os
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

# === –í–ê–ñ–ù–û! –Ø–í–ù–´–ô –ü–£–¢–¨ –ö –ë–ê–ó–ï –î–ê–ù–ù–´–• ===
ANSWERS_DB = r"C:\Users\–†–æ–º–∞–Ω\Desktop\govr_bot\test_answers.db"
QUESTIONS_DB = r"C:\Users\–†–æ–º–∞–Ω\Desktop\govr_bot\bot\tests1.db"

print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–∞ –æ—Ç–≤–µ—Ç–æ–≤:", ANSWERS_DB)
print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:", QUESTIONS_DB)
if not os.path.exists(ANSWERS_DB):
    print("–í–ù–ò–ú–ê–ù–ò–ï: test_answers.db –ù–ï –ù–ê–ô–î–ï–ù!")
if not os.path.exists(QUESTIONS_DB):
    print("–í–ù–ò–ú–ê–ù–ò–ï: tests1.db –ù–ï –ù–ê–ô–î–ï–ù!")

API_TOKEN = "8117876783:AAHq-vAAiVPYawV3Mxx3j1Lt6x3f-9tagoQ"  # –õ—É—á—à–µ –≤—ã–Ω–µ—Å—Ç–∏ –≤ .env!
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

def get_username(user_id):
    conn = sqlite3.connect(ANSWERS_DB)
    cur = conn.cursor()
    cur.execute(
        "SELECT username FROM test_answers WHERE user_id=? AND username IS NOT NULL AND username != '' ORDER BY id DESC LIMIT 1",
        (user_id,)
    )
    row = cur.fetchone()
    conn.close()
    if row and row[0]:
        return row[0]
    return str(user_id)

def get_question_text_and_answer(question_id, test_type=None):
    conn = sqlite3.connect(QUESTIONS_DB)
    cur = conn.cursor()
    if test_type is not None:
        cur.execute(
            "SELECT question, correct_answer FROM tests WHERE id=? AND type=? LIMIT 1",
            (question_id, test_type)
        )
        row = cur.fetchone()
        if row:
            conn.close()
            return row[0], row[1]
    cur.execute(
        "SELECT question, correct_answer FROM tests WHERE id=? LIMIT 1",
        (question_id,)
    )
    row = cur.fetchone()
    conn.close()
    if row:
        return row[0], row[1]
    return "‚Äî", "‚Äî"

# ====== –î–û–ë–ê–í–õ–ï–ù–ê –§–£–ù–ö–¶–ò–Ø –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ======
def get_question_options(question_id, test_type=None):
    conn = sqlite3.connect(QUESTIONS_DB)
    cur = conn.cursor()
    if test_type is not None:
        cur.execute(
            "SELECT options FROM tests WHERE id=? AND type=? LIMIT 1",
            (question_id, test_type)
        )
        row = cur.fetchone()
        if row and row[0]:
            conn.close()
            return row[0]
    cur.execute(
        "SELECT options FROM tests WHERE id=? LIMIT 1",
        (question_id,)
    )
    row = cur.fetchone()
    conn.close()
    if row and row[0]:
        return row[0]
    return ""

def get_question_number_in_test(question_id, test_type):
    conn = sqlite3.connect(QUESTIONS_DB)
    cur = conn.cursor()
    cur.execute(
        "SELECT id FROM tests WHERE type=? ORDER BY id ASC",
        (test_type,)
    )
    all_ids = [row[0] for row in cur.fetchall()]
    conn.close()
    if question_id in all_ids:
        number = all_ids.index(question_id) + 1
        total = len(all_ids)
        return number, total
    return None, None

def get_active_students(timeout_minutes=30):
    conn = sqlite3.connect(ANSWERS_DB)
    cur = conn.cursor()
    # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –Ω–∞—á–∞–ª –∑–∞–¥–∞–Ω–∏–µ –º–µ–Ω–µ–µ X –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
    cur.execute("""
        SELECT user_id, test_type, question_id, started_at
        FROM test_activity
        WHERE answered_at IS NULL
    """)
    result = []
    now = datetime.now()
    for user_id, test_type, question_id, started_at in cur.fetchall():
        if started_at:
            try:
                t1 = datetime.strptime(started_at, "%Y-%m-%d %H:%M:%S")
                delta = now - t1
                if delta.total_seconds() < timeout_minutes * 60:
                    result.append((user_id, test_type, question_id, started_at))
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–∞—Ç—É ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
                pass
    conn.close()
    return result


# == 1. /online –≤—ã–≤–æ–¥–∏–º –ö–ù–û–ü–ö–ò-–£–ß–ï–ù–ò–ö–ò ==
@dp.message(Command("online"))
async def online_command(message: types.Message):
    users = get_active_students()
    if not users:
        await message.answer("–°–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ —Ä–µ—à–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è.")
        return
    lines = ["üü¢ <b>–£—á–µ–Ω–∏–∫–∏ –æ–Ω–ª–∞–π–Ω (—Ä–µ—à–∞—é—Ç –∑–∞–¥–∞–Ω–∏—è):</b>"]
    already = set()
    for user_id, test_type, question_id, started_at in users:
        if user_id in already:
            continue
        already.add(user_id)
        username = get_username(user_id)
        number, total = get_question_number_in_test(question_id, test_type)
        question_text, correct_ans = get_question_text_and_answer(question_id, test_type)
        question_options = get_question_options(question_id, test_type)
        # –°—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è
        if started_at:
            try:
                t1 = datetime.strptime(started_at, "%Y-%m-%d %H:%M:%S")
                now = datetime.now()
                delta = now - t1
                min_, sec_ = divmod(delta.seconds, 60)
                time_str = f"{min_} –º–∏–Ω {sec_} —Å–µ–∫"
            except:
                time_str = "?"
        else:
            time_str = "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å—Ç—Ä–æ–∫—É –≤–æ–ø—Ä–æ—Å–∞
        if number and total:
            question_info = f"–í–æ–ø—Ä–æ—Å: {number} –∏–∑ {total} (id={question_id})"
        else:
            question_info = f"–í–æ–ø—Ä–æ—Å id={question_id}"
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å—ë –≤–º–µ—Å—Ç–µ
        lines.append(
            f"üë§ <b>{username}</b>\n"
            f"{question_info}\n"
            f"{question_text}\n"
            f"{'–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:\n' + question_options if question_options else ''}\n"
            f"<i>–í—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞–Ω–∏–∏: <b>{time_str}</b></i>\n"
            "‚Äî‚Äî‚Äî"
        )
    # –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º–∏
    MAX_LEN = 4096
    text = "\n\n".join(lines)
    for i in range(0, len(text), MAX_LEN):
        await message.answer(text[i:i+MAX_LEN], parse_mode="HTML")

# == 2. –ü–æ—Å–ª–µ –∫–ª–∏–∫–∞ –Ω–∞ —É—á–µ–Ω–∏–∫–∞ ‚Äî –ö–ù–û–ü–ö–ò-–¢–ï–°–¢–´ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π ==
@dp.callback_query(lambda call: call.data.startswith("show_"))
async def show_student_topics(call: CallbackQuery):
    user_id = int(call.data.split("_")[1])
    username = get_username(user_id)
    conn = sqlite3.connect(ANSWERS_DB)
    cur = conn.cursor()
    cur.execute("""
        SELECT test_type,
               COUNT(*) as total,
               SUM(CASE WHEN is_correct=1 THEN 1 ELSE 0 END) as correct,
               SUM(CASE WHEN is_correct=0 THEN 1 ELSE 0 END) as wrong
        FROM test_activity
        WHERE user_id=?
        GROUP BY test_type
        ORDER BY test_type
    """, (user_id,))
    types_stats = cur.fetchall()
    conn.close()
    if not types_stats:
        await call.message.answer(f"–£ —É—á–µ–Ω–∏–∫–∞ {username} –Ω–µ—Ç —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return
    topics = []
    for test_type, total, correct, wrong in types_stats:
        topic_name = f"–¢–µ—Å—Ç {test_type}"
        topics.append((test_type, topic_name, total, correct or 0, wrong or 0))
    buttons = [
        [
            InlineKeyboardButton(
                text=f"{topic_name} (—Ä–µ—à–µ–Ω–æ: {total}, –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {correct}, –æ—à–∏–±–æ–∫: {wrong})",
                callback_data=f"topic_{user_id}_{test_type}"
            )
        ]
        for test_type, topic_name, total, correct, wrong in topics
    ]
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await call.message.answer(
        f"üßë <b>{username}</b>\n–í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã:",
        parse_mode="HTML",
        reply_markup=kb
    )

# == 3. –ü–æ—Å–ª–µ –∫–ª–∏–∫–∞ –Ω–∞ —Ç–µ—Å—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ —ç—Ç–æ–º—É —Ç–µ—Å—Ç—É ==
@dp.callback_query(lambda call: call.data.startswith("topic_"))
async def show_student_answers_by_topic(call: CallbackQuery):
    parts = call.data.split("_")
    user_id = int(parts[1])
    test_type = int(parts[2])
    username = get_username(user_id)
    topic_name = f"–¢–µ—Å—Ç {test_type}"
    conn = sqlite3.connect(ANSWERS_DB)
    cur = conn.cursor()
    cur.execute("""
        SELECT question_id, is_correct, started_at, answered_at
        FROM test_activity
        WHERE user_id=? AND test_type=?
        ORDER BY answered_at DESC, started_at DESC
        LIMIT 100
    """, (user_id, test_type))
    rows = cur.fetchall()
    conn.close()
    if not rows:
        await call.message.answer(f"–ü–æ —Ç–µ–º–µ <b>{topic_name}</b> —É—á–µ–Ω–∏–∫ {username} –µ—â—ë –Ω–µ —Ä–µ—à–∞–ª –∑–∞–¥–∞–Ω–∏—è.")
        return
    lines = [f"üßë <b>{username}</b> ‚Äî {topic_name}"]
    for question_id, is_correct, started_at, answered_at in rows:
        number, total = get_question_number_in_test(question_id, test_type)
        if is_correct == 1:
            status = "‚úÖ"
        elif is_correct == 0:
            status = "‚ùå"
        else:
            status = "üü°"
        question_text, correct_ans = get_question_text_and_answer(question_id, test_type)

        # === –î–û–ë–ê–í–õ–Ø–ï–ú –í–ê–†–ò–ê–ù–¢–´ –û–¢–í–ï–¢–û–í ===
        question_options = get_question_options(question_id, test_type)
        if question_options:
            options_str = f"\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:\n{question_options}"
        else:
            options_str = ""

        if number and total:
            question_info = f"–í–æ–ø—Ä–æ—Å: {number} –∏–∑ {total} (id={question_id})"
        else:
            question_info = f"–í–æ–ø—Ä–æ—Å: {question_id}"
        time_str = ""
        if started_at and answered_at:
            try:
                t1 = datetime.strptime(started_at, "%Y-%m-%d %H:%M:%S")
                t2 = datetime.strptime(answered_at, "%Y-%m-%d %H:%M:%S")
                delta = t2 - t1
                min_, sec_ = divmod(delta.seconds, 60)
                time_str = f"\n–í—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ: <b>{min_} –º–∏–Ω {sec_} —Å–µ–∫</b>"
            except Exception as e:
                time_str = ""
        elif started_at and not answered_at:
            time_str = "\n–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ —Å–µ–π—á–∞—Å"
        lines.append(
            f"{status} {question_info}\n"
            f"–í–æ–ø—Ä–æ—Å: {question_text}{options_str}\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_ans}</b>{time_str}"
        )
    text = "\n\n".join(lines)
    MAX_LEN = 4096
    for i in range(0, len(text), MAX_LEN):
        await call.message.answer(text[i:i+MAX_LEN], parse_mode="HTML")

# == –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∑–∞–≥–ª—É—à–∫–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ==
@dp.callback_query(lambda call: call.data == "main_menu")
async def main_menu(call: CallbackQuery):
    await call.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n(–ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ –∫–Ω–æ–ø–∫–∏.)")

if __name__ == "__main__":
    print("Teacher assistant –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    import asyncio
    asyncio.run(dp.start_polling(bot))
