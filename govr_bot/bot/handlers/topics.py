from aiogram import Router, types
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    BufferedInputFile,
)
from aiogram.enums import ParseMode

from bot.utils import (
    ALL_TOPICS,  # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    clean_html,  # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–¥–µ—Å—å, –Ω–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è
    user_topics, # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–¥–µ—Å—å, –Ω–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è
    LEARNING_TOPICS,
    user_learning_state,
    TEXTBOOK_CONTENT,
    latex_to_codeblock,
    BEGIN_CHEM_TOPICS,
    ELEMENT_CHEM_TOPICS,
    get_prepared_chunks_count,
    get_prepared_lecture,
    get_audio_from_db,
)
from bot.handlers.menu import main_kb
from bot.services.gpt_service import answer_student_question

router = Router()

# ================== –†–∞–∑–¥–µ–ª—ã ¬´–¢–µ–æ—Ä–∏–∏ –ø–æ —Ö–∏–º–∏–∏¬ª ==================

# 1) –ù–∞—á–∞–ª–∞ —Ö–∏–º–∏–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤
@router.message(lambda m: m.text == "üìñ –ù–∞—á–∞–ª–∞ —Ö–∏–º–∏–∏")
async def begin_chem(m: types.Message):
    buttons = [
        [InlineKeyboardButton(text=topic, callback_data=f"begin_topic_{i}")]
        for i, topic in enumerate(BEGIN_CHEM_TOPICS)
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await m.answer("–í—ã–±–µ—Ä–∏ –≥–ª–∞–≤—É –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ ¬´–ù–∞—á–∞–ª–∞ —Ö–∏–º–∏–∏¬ª:", reply_markup=kb)

# –í—ã–±–æ—Ä –≥–ª–∞–≤—ã ¬´–ù–∞—á–∞–ª–∞ —Ö–∏–º–∏–∏¬ª
@router.callback_query(lambda c: c.data.startswith("begin_topic_"))
async def begin_topic_chosen(cb: types.CallbackQuery, bot):
    try:
        idx = int(cb.data.split("begin_topic_")[-1])
        topic = BEGIN_CHEM_TOPICS[idx]
    except Exception:
        await cb.message.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–º—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=main_kb)
        return
    user_learning_state[cb.from_user.id] = {"topic": topic, "index": 0, "awaiting_question": False}
    await send_next_chunk(cb.from_user.id, bot)

# 2) –•–∏–º–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ‚Äî –°–ü–ò–°–û–ö –ì–õ–ê–í (–ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π)
@router.message(lambda m: m.text == "‚öóÔ∏è –•–∏–º–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
async def element_chem(m: types.Message):
    buttons = [
        [InlineKeyboardButton(text=topic, callback_data=f"element_topic_{i}")]
        for i, topic in enumerate(ELEMENT_CHEM_TOPICS)
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await m.answer("–í—ã–±–µ—Ä–∏ –≥–ª–∞–≤—É –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ ¬´–•–∏–º–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤¬ª:", reply_markup=kb)

# –í—ã–±–æ—Ä –≥–ª–∞–≤—ã ¬´–•–∏–º–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤¬ª
@router.callback_query(lambda c: c.data.startswith("element_topic_"))
async def element_topic_chosen(cb: types.CallbackQuery, bot):
    try:
        idx = int(cb.data.split("element_topic_")[-1])
        topic = ELEMENT_CHEM_TOPICS[idx]
    except Exception:
        await cb.message.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–º—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=main_kb)
        return
    user_learning_state[cb.from_user.id] = {"topic": topic, "index": 0, "awaiting_question": False}
    await send_next_chunk(cb.from_user.id, bot)

# 3) –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è —Ö–∏–º–∏—è ‚Äî —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤
@router.message(lambda m: m.text == "üß¨ –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è —Ö–∏–º–∏—è")
async def organic_chem(m: types.Message):
    buttons = [
        [InlineKeyboardButton(text=topic, callback_data=f"learn_topic_{i}")]
        for i, topic in enumerate(LEARNING_TOPICS)
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await m.answer("–í—ã–±–µ—Ä–∏ –≥–ª–∞–≤—É –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ ¬´–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è —Ö–∏–º–∏—è¬ª:", reply_markup=kb)

# –í—ã–±–æ—Ä –≥–ª–∞–≤—ã ¬´–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è —Ö–∏–º–∏—è¬ª
@router.callback_query(lambda c: c.data.startswith("learn_topic_"))
async def learn_topic_chosen(cb: types.CallbackQuery, bot):
    try:
        idx = int(cb.data.split("learn_topic_")[-1])
        topic = LEARNING_TOPICS[idx]
    except Exception:
        await cb.message.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–º—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=main_kb)
        return
    user_learning_state[cb.from_user.id] = {"topic": topic, "index": 0, "awaiting_question": False}
    await send_next_chunk(cb.from_user.id, bot)

# ================== –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ chunk ==================
async def send_next_chunk(user_id: int, bot):
    st = user_learning_state.get(user_id)
    if not st:
        return

    topic = st["topic"]
    idx = st["index"]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
    if topic in LEARNING_TOPICS:
        chapter_list = LEARNING_TOPICS
    elif topic in BEGIN_CHEM_TOPICS:
        chapter_list = BEGIN_CHEM_TOPICS
    elif topic in ELEMENT_CHEM_TOPICS:
        chapter_list = ELEMENT_CHEM_TOPICS
    else:
        chapter_list = [topic]

    chap_num = chapter_list.index(topic) + 1 if topic in chapter_list else 1
    chap_total = len(chapter_list)

    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ü–∏–∏ —Ç–µ–æ—Ä–∏–∏: JSON –∏/–∏–ª–∏ –ë–î
    chunks_json = TEXTBOOK_CONTENT.get(topic, [])
    total_from_json = len(chunks_json)
    total_from_db = get_prepared_chunks_count(topic)
    total = total_from_json if total_from_json > 0 else total_from_db

    if total == 0:
        await bot.send_message(
            user_id,
            f"–ü–æ —Ç–µ–º–µ ¬´{topic}¬ª –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–π –ª–µ–∫—Ü–∏–∏.",
            reply_markup=main_kb,
        )
        user_learning_state.pop(user_id, None)
        return

    if idx >= total:
        await bot.send_message(
            user_id,
            f"–ì–ª–∞–≤–∞ ¬´{topic}¬ª –ø—Ä–æ–π–¥–µ–Ω–∞! üéâ",
            reply_markup=main_kb,
        )
        user_learning_state.pop(user_id, None)
        return

    # –ë–µ—Ä—ë–º –ª–µ–∫—Ü–∏—é –∏–∑ –ë–î (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) –∏–ª–∏ –∏–∑ JSON
    raw = get_prepared_lecture(topic, idx)
    if not raw and total_from_json:
        raw = chunks_json[idx] if idx < len(chunks_json) else None

    if not raw:
        await bot.send_message(
            user_id,
            "–õ–µ–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞. –°–æ–æ–±—â–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=main_kb,
        )
        return

    header = f"–ì–ª–∞–≤–∞ {chap_num}/{chap_total}, –ø–æ—Ä—Ü–∏—è {idx+1}/{total}\n\n"
    formatted = latex_to_codeblock(raw)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
    audio_data = get_audio_from_db(topic, idx)
    has_audio = audio_data is not None

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∞—É–¥–∏–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞—É–¥–∏–æ
    keyboard_buttons = [
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="learn_back"),
            InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="learn_ok"),
        ],
        [
            InlineKeyboardButton(text="‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="learn_ask"),
            InlineKeyboardButton(text="‚ñ† –°—Ç–æ–ø", callback_data="learn_stop"),
            InlineKeyboardButton(text="üè† –ö –≥–ª–∞–≤–∞–º", callback_data="learn_to_chapters"),
        ],
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞—É–¥–∏–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞—É–¥–∏–æ
    if has_audio:
        keyboard_buttons.insert(1, [
            InlineKeyboardButton(text="üîä –°–ª—É—à–∞—Ç—å –∞—É–¥–∏–æ", callback_data="learn_audio")
        ])

    kb = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    await bot.send_message(
        user_id,
        header + formatted,
        reply_markup=kb,
        parse_mode=ParseMode.MARKDOWN,
    )

# ================== –ù–∞–≤–∏–≥–∞—Ü–∏—è ==================
@router.callback_query(lambda c: c.data == "learn_ok")
async def learn_ok(cb: types.CallbackQuery, bot):
    st = user_learning_state.get(cb.from_user.id)
    if st:
        st["index"] += 1
    await send_next_chunk(cb.from_user.id, bot)

@router.callback_query(lambda c: c.data == "learn_back")
async def learn_back(cb: types.CallbackQuery, bot):
    st = user_learning_state.get(cb.from_user.id)
    if st and st["index"] > 0:
        st["index"] -= 1
    await send_next_chunk(cb.from_user.id, bot)

@router.callback_query(lambda c: c.data == "learn_stop")
async def learn_stop(cb: types.CallbackQuery):
    user_learning_state.pop(cb.from_user.id, None)
    await cb.message.answer("–û–±—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=main_kb)

@router.callback_query(lambda c: c.data == "learn_audio")
async def learn_audio(cb: types.CallbackQuery, bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞—É–¥–∏–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    st = user_learning_state.get(cb.from_user.id)
    if not st:
        await cb.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    topic = st["topic"]
    idx = st["index"]
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    audio_data = get_audio_from_db(topic, idx)
    if not audio_data:
        await cb.answer("–ê—É–¥–∏–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    audio_blob, audio_format, duration_ms = audio_data
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_voice(
            chat_id=cb.from_user.id,
            voice=BufferedInputFile(
                audio_blob, 
                filename=f"{topic}_chunk_{idx}.{audio_format}"
            ),
            caption=f"üîä –ê—É–¥–∏–æ –∫ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—É ¬´{topic}¬ª (—á–∞—Å—Ç—å {idx+1})"
        )
        await cb.answer("–ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        
    except Exception as e:
        await cb.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {str(e)}")

@router.callback_query(lambda c: c.data == "learn_to_chapters")
async def learn_to_chapters(cb: types.CallbackQuery):
    st = user_learning_state.get(cb.from_user.id)
    topic = st["topic"] if st else None
    user_learning_state.pop(cb.from_user.id, None)

    if topic in BEGIN_CHEM_TOPICS:
        buttons = [
            [InlineKeyboardButton(text=t, callback_data=f"begin_topic_{i}")]
            for i, t in enumerate(BEGIN_CHEM_TOPICS)
        ]
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await cb.message.answer("–í—ã–±–µ—Ä–∏ –≥–ª–∞–≤—É –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ ¬´–ù–∞—á–∞–ª–∞ —Ö–∏–º–∏–∏¬ª:", reply_markup=kb)

    elif topic in ELEMENT_CHEM_TOPICS:
        buttons = [
            [InlineKeyboardButton(text=t, callback_data=f"element_topic_{i}")]
            for i, t in enumerate(ELEMENT_CHEM_TOPICS)
        ]
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await cb.message.answer("–í—ã–±–µ—Ä–∏ –≥–ª–∞–≤—É –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ ¬´–•–∏–º–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤¬ª:", reply_markup=kb)

    else:
        buttons = [
            [InlineKeyboardButton(text=t, callback_data=f"learn_topic_{i}")]
            for i, t in enumerate(LEARNING_TOPICS)
        ]
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await cb.message.answer("–í—ã–±–µ—Ä–∏ –≥–ª–∞–≤—É –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ ¬´–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è —Ö–∏–º–∏—è¬ª:", reply_markup=kb)

# ================== –ü–û–ò–°–ö –ì–õ–ê–í ==================
awaiting_topic_search: set[int] = set()

@router.message(lambda m: m.text == "üîé –ü–æ–∏—Å–∫ –≥–ª–∞–≤—ã")
async def search_topic_start(m: types.Message):
    awaiting_topic_search.add(m.from_user.id)
    await m.answer("üîé –í–≤–µ–¥–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≥–ª–∞–≤—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–∫–∏—Å–ª–æ—Ç—ã¬ª, ¬´–∞–ª–∫–∞–Ω—ã¬ª, ¬´—Å–≤—è–∑—å¬ª, ¬´–û–í–†¬ª).")

@router.message(lambda m: m.from_user.id in awaiting_topic_search)
async def search_topic_query(m: types.Message):
    # —Å–Ω–∏–º–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
    awaiting_topic_search.discard(m.from_user.id)
    q = (m.text or "").strip().lower()
    if not q:
        await m.answer("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –ù–∞–∂–º–∏ ¬´üîé –ü–æ–∏—Å–∫ –≥–ª–∞–≤—ã¬ª –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    begin_matches = [(i, t) for i, t in enumerate(BEGIN_CHEM_TOPICS) if q in t.lower()]
    elem_matches  = [(i, t) for i, t in enumerate(ELEMENT_CHEM_TOPICS) if q in t.lower()]
    org_matches   = [(i, t) for i, t in enumerate(LEARNING_TOPICS)    if q in t.lower()]

    if not begin_matches and not org_matches and not elem_matches:
        await m.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ –∏ –Ω–∞–∂–º–∏ ¬´üîé –ü–æ–∏—Å–∫ –≥–ª–∞–≤—ã¬ª.")
        return

    buttons: list[list[InlineKeyboardButton]] = []
    if begin_matches:
        buttons.append([InlineKeyboardButton(text="‚Äî –ù–∞—á–∞–ª–∞ —Ö–∏–º–∏–∏ ‚Äî", callback_data="noop")])
        buttons += [[InlineKeyboardButton(text=t, callback_data=f"begin_topic_{i}")] for i, t in begin_matches[:25]]

    if elem_matches:
        buttons.append([InlineKeyboardButton(text="‚Äî –•–∏–º–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ‚Äî", callback_data="noop")])
        buttons += [[InlineKeyboardButton(text=t, callback_data=f"element_topic_{i}")] for i, t in elem_matches[:25]]

    if org_matches:
        buttons.append([InlineKeyboardButton(text="‚Äî –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è —Ö–∏–º–∏—è ‚Äî", callback_data="noop")])
        buttons += [[InlineKeyboardButton(text=t, callback_data=f"learn_topic_{i}")] for i, t in org_matches[:25]]

    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Ä–∞–∑–¥–µ–ª–∞–º —Ç–µ–æ—Ä–∏–∏", callback_data="search_back_theory")])

    await m.answer(
        "–ù–∞—à—ë–ª –≤–æ—Ç —á—Ç–æ ‚Äî –≤—ã–±–µ—Ä–∏ –≥–ª–∞–≤—É:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
    )

@router.callback_query(lambda c: c.data == "search_back_theory")
async def search_back_theory(cb: types.CallbackQuery):
    rows = [
        [KeyboardButton(text="üìñ –ù–∞—á–∞–ª–∞ —Ö–∏–º–∏–∏")],
        [KeyboardButton(text="‚öóÔ∏è –•–∏–º–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤")],
        [KeyboardButton(text="üß¨ –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è —Ö–∏–º–∏—è")],
        [KeyboardButton(text="üîé –ü–æ–∏—Å–∫ –≥–ª–∞–≤—ã")],
        [KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")],
    ]
    kb = ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)
    await cb.message.answer("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª —Ç–µ–æ—Ä–∏–∏:", reply_markup=kb)
    await cb.answer()

@router.callback_query(lambda c: c.data == "noop")
async def noop(cb: types.CallbackQuery):
    # –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    await cb.answer()

# ================== –í–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–æ—Ä–∏–∏ ==================
@router.callback_query(lambda c: c.data == "learn_ask")
async def learn_ask(cb: types.CallbackQuery):
    st = user_learning_state.get(cb.from_user.id)
    if st:
        st["awaiting_question"] = True
    await cb.message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–π –≥–ª–∞–≤–µ:")

@router.message()
async def catch_user_question(m: types.Message):
    st = user_learning_state.get(m.from_user.id)
    if not st or not st.get("awaiting_question"):
        return
    st["awaiting_question"] = False
    topic = st["topic"]
    # –û—Ç–≤–µ—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ gpt_service.py
    answer = await answer_student_question(topic, m.text)
    await m.answer(answer)
