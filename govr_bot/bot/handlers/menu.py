from aiogram import Router, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile

from bot.utils import user_learning_state
from bot.services.spreadsheet import fetch_user_records
from bot.services.pdf_generator import make_report

# –µ—Å–ª–∏ main_kb –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö ‚Äî –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π —Ç–∞–º: from bot.handlers.menu import main_kb

router = Router()

# ==== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–æ–±–Ω–æ–≤–ª–µ–Ω–æ) ====
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üìö –¢–µ–æ—Ä–∏—è –ø–æ —Ö–∏–º–∏–∏"),
            KeyboardButton(text="üìù –¢–µ—Å—Ç—ã"),
        ],
        [
            KeyboardButton(text="üß™ –£—Å—Ç–Ω—ã–π –∑–∞—á–µ—Ç"),
            KeyboardButton(text="üìà –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç"),
        ],
        [
            KeyboardButton(text="‚ÑπÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç"),
        ],
    ],
    resize_keyboard=True
)

# ==== /start –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é ====
@router.message(lambda m: m.text == "/start" or m.text == "–ú–µ–Ω—é" or m.text == "‚¨ÖÔ∏è –í –º–µ–Ω—é")
async def cmd_start(m: types.Message):
    await m.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ö–∏–º–∏–∏.\n\n"
        "‚Ä¢ üìö –¢–µ–æ—Ä–∏—è –ø–æ —Ö–∏–º–∏–∏ ‚Äî –∏–∑—É—á–∞–π –≥–ª–∞–≤—ã –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º (–ù–∞—á–∞–ª–∞, –≠–ª–µ–º–µ–Ω—Ç—ã, –û—Ä–≥–∞–Ω–∏–∫–∞)\n"
        "‚Ä¢ üß™ –£—Å—Ç–Ω—ã–π –∑–∞—á–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π –≥–æ–ª–æ—Å–æ–º, –ò–ò –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –ø–æ–¥—Å–∫–∞–∂–µ—Ç\n"
        "‚Ä¢ üìù –¢–µ—Å—Ç—ã ‚Äî —Ç—Ä–µ–Ω–∏—Ä—É–π—Å—è –∏ —Ä–∞–±–æ—Ç–∞–π –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏\n"
        "‚Ä¢ üìà –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç ‚Äî PDF —Å —Ç–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º",
        reply_markup=main_kb
    )

# ==== –ü–æ–¥–º–µ–Ω—é ¬´–¢–µ–æ—Ä–∏—è –ø–æ —Ö–∏–º–∏–∏¬ª ====
@router.message(lambda m: m.text == "üìö –¢–µ–æ—Ä–∏—è –ø–æ —Ö–∏–º–∏–∏")
async def theory_menu(m: types.Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìñ –ù–∞—á–∞–ª–∞ —Ö–∏–º–∏–∏")],
            [KeyboardButton(text="‚öóÔ∏è –•–∏–º–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤")],
            [KeyboardButton(text="üß¨ –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è —Ö–∏–º–∏—è")],
            [KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")],
        ],
        resize_keyboard=True
    )
    await m.answer("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª —Ç–µ–æ—Ä–∏–∏:", reply_markup=kb)

# ==== –û—Ç—á—ë—Ç (PDF) ====
@router.message(lambda m: m.text == "üìà –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç")
async def get_report(m: types.Message):
    records = fetch_user_records(m.from_user.id)
    if not records:
        await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞ ‚Äî –ø—Ä–æ–π–¥–∏ —Ç–µ–º—ã –∏–ª–∏ —Ç–µ—Å—Ç—ã.")
        return
    pdf_path = make_report(m.from_user.id, m.from_user.full_name, records)
    await m.answer_document(FSInputFile(pdf_path), caption="–í–æ—Ç —Ç–≤–æ–π PDF-–æ—Ç—á—ë—Ç!")

# ==== –°–ø—Ä–∞–≤–∫–∞ ====
@router.message(lambda m: m.text == "‚ÑπÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç")
async def how_bot_works(m: types.Message):
    await m.answer(
        "‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n"
        "1) –ó–∞–π–¥–∏ –≤ ¬´üìö –¢–µ–æ—Ä–∏—è –ø–æ —Ö–∏–º–∏–∏¬ª, –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –∏ –≥–ª–∞–≤—É\n"
        "2) –ß–∏—Ç–∞–π –ø–æ—Ä—Ü–∏–∏ —Ç–µ–æ—Ä–∏–∏, –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã (¬´‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å¬ª)\n"
        "3) –ü—Ä–æ—Ö–æ–¥–∏ ¬´üìù –¢–µ—Å—Ç—ã¬ª, –∞ –∑–∞—Ç–µ–º ¬´–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏¬ª\n"
        "4) –ó–∞–±–∏—Ä–∞–π ¬´üìà –û—Ç—á—ë—Ç¬ª —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º\n\n"
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —ç—Ç–æ –º–µ–Ω—é –º–æ–∂–Ω–æ –∫–Ω–æ–ø–∫–æ–π ¬´‚¨ÖÔ∏è –í –º–µ–Ω—é¬ª.",
        reply_markup=main_kb
    )

# ==== (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞, –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ====
@router.message(lambda m: m.text == "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
async def resume_course(m: types.Message):
    state = user_learning_state.get(m.from_user.id)
    if not state:
        await m.answer("–¢—ã –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –æ–±—É—á–µ–Ω–∏–µ. –û—Ç–∫—Ä–æ–π ¬´üìö –¢–µ–æ—Ä–∏—è –ø–æ —Ö–∏–º–∏–∏¬ª –∏ –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª.", reply_markup=main_kb)
        return
    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å—Ç—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π chunk
    from bot.handlers.topics import send_next_chunk
    await send_next_chunk(m.from_user.id, m.bot)
