import sqlite3
import os
from pathlib import Path

def extract_audio_from_db():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö prepared_lectures.db"""
    
    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –∞—É–¥–∏–æ-–∫–æ–Ω—Å–ø–µ–∫—Ç—ã –≤ govr_bot
    audio_folder = Path("govr_bot/–∞—É–¥–∏–æ-–∫–æ–Ω—Å–ø–µ–∫—Ç—ã")
    audio_folder.mkdir(exist_ok=True)
    
    print(f"–ê—É–¥–∏–æ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {audio_folder.absolute()}")
    
    db_path = "govr_bot/bot/prepared_lectures.db"
    
    if not os.path.exists(db_path):
        print(f"–§–∞–π–ª {db_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        with sqlite3.connect(db_path) as conn:
            c = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –∞—É–¥–∏–æ
            c.execute("""
                SELECT topic, chunk_idx, tts_audio, tts_audio_format, tts_voice, duration_ms
                FROM prepared_lectures 
                WHERE tts_audio IS NOT NULL AND tts_audio != ''
                ORDER BY topic, chunk_idx
            """)
            
            records = c.fetchall()
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π —Å –∞—É–¥–∏–æ")
            
            if not records:
                print("–ê—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
                return
            
            extracted_count = 0
            
            for topic, chunk_idx, audio_blob, audio_format, voice, duration in records:
                if not audio_blob:
                    continue
                
                # –°–æ–∑–¥–∞—ë–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                safe_topic = "".join(c for c in topic if c.isalnum() or c in (' ', '-', '_')).rstrip()
                safe_topic = safe_topic.replace(' ', '_')
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                if audio_format:
                    ext = audio_format.lower()
                    if ext not in ['ogg', 'mp3', 'wav', 'm4a']:
                        ext = 'ogg'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                else:
                    ext = 'ogg'
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                filename = f"{safe_topic}_chunk_{chunk_idx:03d}.{ext}"
                filepath = audio_folder / filename
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ
                try:
                    with open(filepath, 'wb') as f:
                        f.write(audio_blob)
                    
                    extracted_count += 1
                    print(f"‚úì {filename} ({len(audio_blob)} –±–∞–π—Ç, {duration}ms)")
                    
                except Exception as e:
                    print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")
            
            print(f"\n‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {extracted_count} –∞—É–¥–∏–æ-—Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫—É: {audio_folder.absolute()}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–º–∞–º
            c.execute("""
                SELECT topic, COUNT(*) as count
                FROM prepared_lectures 
                WHERE tts_audio IS NOT NULL AND tts_audio != ''
                GROUP BY topic
                ORDER BY count DESC
            """)
            
            topic_stats = c.fetchall()
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º:")
            for topic, count in topic_stats:
                print(f"  - {topic}: {count} —Ñ–∞–π–ª–æ–≤")
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == "__main__":
    extract_audio_from_db()
